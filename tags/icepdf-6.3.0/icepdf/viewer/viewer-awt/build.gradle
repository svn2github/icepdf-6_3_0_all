apply plugin: 'application'

description 'ICEpdf viewer reference implementation project'

mainClassName = "org.icepdf.ri.viewer.Main"
applicationDefaultJvmArgs = ["-Xms64m", "-Xmx1024m"]

def sectionName = 'org/icepdf/ri/'
def baseJarName = 'icepdf'
def baseAppendixName  = 'viewer'

// generatePomFileForViewerJarPublication
publishing {
    publications {
        viewerJar(MavenPublication) {
            groupId 'org.icepdf.os'
            artifactId 'icepdf-viewer'
            version "${VERSION + '-' + RELEASE_TYPE}"

            pom.withXml {
                asNode().appendNode('description', 'ICEpdf core rendering library.')
                asNode().appendNode('url', 'http://www.icepdf.org')
                asNode().appendNode('scm')
                        .appendNode('connection', 'scm:svn:http://anonsvn.icesoft.org/repo/icepdf/').parent()
                        .appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt').parent()
                        .appendNode('tag',  'icepdf-' + version+ '-maven')
                asNode().appendNode('licenses').appendNode('license')
                        .appendNode('name', 'Apache License, Version 2.0').parent()
                        .appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.html').parent()
                        .appendNode('distribution', 'repo')
                asNode().appendNode('developers').appendNode('developer')
                        .appendNode('name', 'ICEsoft Technologies Canada Corp.').parent()
                        .appendNode('email', 'product.sales@icesoft.com')
            }
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

jar {
    baseName 'icepdf'
    appendix 'viewer'
    version "${VERSION}"
    classifier "${RELEASE_TYPE}"
    manifest {
        attributes("Main-Class": 'org.icepdf.ri.viewer.Main')
        // section names attributes
        attributes("Implementation-Title": "${baseName + '-' + appendix}", "${sectionName}")
        attributes("Implementation-Version": "${version + '-' + classifier}", "${sectionName}")
        attributes("Implementation-Vendor": "${COMPANY}", "${sectionName}")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Assembles a jar archive containing the main classes source code.'
    group = 'Documentation'
    baseName "${baseJarName}"
    appendix "${baseAppendixName}"
    version "${VERSION}"
    classifier = 'sources'
    manifest {
        attributes("Implementation-Title": "${baseName + '-' + appendix}", "${sectionName}")
        attributes("Implementation-Version": "${version + '-' + classifier}", "${sectionName}")
        attributes("Implementation-Vendor": "${COMPANY}", "${sectionName}")
    }
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from javadoc
    classifier = 'javadoc'
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

dependencies {
    compile project(':core:core-awt')
}
